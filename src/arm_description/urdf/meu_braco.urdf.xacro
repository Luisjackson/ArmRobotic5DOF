<?xml version="1.0"?>
<robot name="meu_braco" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <!-- Argumento para decidir se usamos o hardware real ou simulação -->
    <xacro:arg name="use_real_hardware" default="false"/>

    <!-- Carrega a interface de controlo correta baseada no argumento -->
    <xacro:if value="$(arg use_real_hardware)">
        <xacro:include filename="$(find arm_description)/urdf/real_robot.ros2_control.xacro"/>
    </xacro:if>
    <xacro:unless value="$(arg use_real_hardware)">
        <xacro:include filename="$(find arm_description)/urdf/model_ros2_control.xacro"/>
    </xacro:unless>

    <!-- Define os limites das juntas -->
    <xacro:property name="joints_vlimit" value="1.571"/>
    <xacro:property name="pan_llimit" value="-2.617"/>
    <xacro:property name="pan_ulimit" value="2.617"/>
    <xacro:property name="shoulder_llimit" value="-2.2"/>
    <xacro:property name="shoulder_ulimit" value="2.16"/>
    <xacro:property name="elbow_llimit" value="-2.42"/>
    <xacro:property name="elbow_ulimit" value="2.38"/>
    <xacro:property name="wrist_llimit" value="-1.72"/>
    <xacro:property name="wrist_ulimit" value="1.68"/>

    <!-- Inclui a descrição visual/física do braço -->
    <xacro:include filename="$(find arm_description)/urdf/turtlebot_arm.xacro"/>
    
    <!-- Link base do robô -->
    <link name="base_link"/>

    <!-- Instancia o braço robótico no mundo -->
    <xacro:turtlebot_arm parent="base_link" color="Gray" gripper_color="Gray" 
                         pincher_gripper="false" turtlebot_gripper="false"
                         crane_plus_gripper="true">
        <origin xyz="0 0 0"/>
    </xacro:turtlebot_arm>

    <link name="camera_link">
      <visual>
        <!-- Define a aparência da câmara no simulador (uma pequena caixa vermelha) -->
        <geometry>
          <box size="0.025 0.05 0.025"/>
        </geometry>
        <material name="red">
          <color rgba="1.0 0.0 0.0 1.0"/>
        </material>
      </visual>
      <collision>
        <!-- Define a forma de colisão da câmara -->
        <geometry>
          <box size="0.025 0.05 0.025"/>
        </geometry>
      </collision>
      <inertial>
        <!-- Propriedades de massa e inércia para a simulação física -->
        <mass value="0.01"/>
        <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
      </inertial>
    </link>

    <joint name="camera_joint" type="fixed">
      <parent link="wrist_pitch_link"/>
      <child link="camera_link"/>

      <origin xyz="0.05 0 0" rpy="0 0 0"/>
    </joint>

    <gazebo reference="camera_link">
      <!-- Define o 'link' como um sensor do tipo 'camera' -->
      <sensor type="camera" name="my_camera_sensor">
        <update_rate>30.0</update_rate>
        <camera name="head">
          <!-- Configurações da lente da câmara virtual -->
          <horizontal_fov>1.3962634</horizontal_fov>
          <image>
            <width>800</width>
            <height>800</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.02</near>
            <far>300</far>
          </clip>
        </camera>

        <!-- Este é o plugin que pega os dados da câmara simulada e os   -->
        <!-- publica como tópicos ROS 2 que o RViz e outros nós podem usar. -->
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <ros>
            <!-- Remapeia o nome do tópico de saída para /camera/image_raw -->
            <namespace>/camera</namespace>
            <argument>image_raw:=image_raw</argument>
            <argument>camera_info:=camera_info</argument>
          </ros>

          <!-- O nome do frame da câmara, que deve ser o mesmo do nosso link -->
          <camera_frame>camera_link</camera_frame>
        </plugin>
      </sensor>
    </gazebo>

</robot>